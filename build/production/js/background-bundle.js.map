{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/Engine.js","src/js/Period.js","src/js/Router.js","src/js/Static.js","src/js/app.js","src/js/audio.js","src/js/badger.js","src/js/notify.js","src/js/utils.js"],"names":[],"mappingshlrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"background-bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nconsole.info('Engine module');\n\nvar Static = require('./Static.js'),\n    Period = require('./Period.js'),\n    Router = require('./Router.js'),\n    badger = require('./badger.js'),\n    utils  = require('./utils.js'),\n    notify = require('./notify.js'),\n    audio  = require('./audio.js');\n\nvar state = new Static('state', 'on'),\n    session = new Period('session', '60000'),\n    idle = new Period('idle', '30000'),\n    router = new Router('backend'),\n\n    afk = {\n        timeoutId: null,\n        startDate: null\n    };\n\nchrome.idle.setDetectionInterval(15);\n\nfunction switcher() {\n\n    // If app is on , then run it.\n    if (state.load() === 'on') {\n        switchOn();\n    } else {\n\n        // If it is 'off' then just change browserAction\n        switchOff();\n    }\n}\n\nfunction switchOn() {\n    console.info('switched ON');\n\n    addIdleListener();\n    addBtnListener();\n    startSession();\n    router.send('sessionStarted');\n    badger.enableIcon();\n\n    console.log('session started , period : ' + session.period.load());\n}\n\nfunction switchOff() {\n    console.log('SK is OFF');\n\n    state.save('off');\n\n    if (afk.timeoutId) {\n        dontTrackAfk();\n    }\n\n    endSession();\n    router.send('sessionEnded');\n    endIdle();\n    router.send('idleInded');\n    rmIdleListener();\n    rmBtnListener();\n    badger.disableIcon();\n    audio.stop();\n    notify.closeAll();\n}\n\n\nfunction idleListener(idleState) {\n    console.log(idleState + ' fired');\n\n    var idleRunning = idle.isRunning(),\n        sessionRunning = session.isRunning(),\n        idlePaused = idle.isPaused();\n\n    // If app state is 'off' - ignore\n    if (state.load() === 'off') {\n        return;\n    }\n\n    // IDLE state fired!\n    if (idleState === 'idle') {\n\n        // If session is running and user goes afk ,\n        // start countdown certain amount of time, after witch\n        // app assumes that user have rested.\n        if (sessionRunning) {\n            trackAfk();\n            console.log('tracking AFK...');\n        }\n\n        // If session time elapsed and user doesn't do any inputs - start\n        // idle period.\n        if (!sessionRunning && !idleRunning) {\n            startIdle();\n            router.send('idleStarted');\n            console.log('idle started , period : ' + idle.period.load());\n        }\n\n        if (idlePaused) {\n            startIdle();\n            router.send('idleStarted');\n        }\n\n        router.send('idle');\n    }\n\n\n    // ACTIVE state fired!\n    if (idleState === 'active') {\n\n        // If user was afk while session was running -\n        // stop countdown afk time.\n        if (sessionRunning) {\n            dontTrackAfk();\n            console.log('stop tracking AFK');\n        }\n\n        // If idle period is running and user have made an input -\n        // notify user that idle period is not finished yet.\n        if (idleRunning) {\n            pauseIdle();\n            notify.idleInterrupted();\n            audio.play(1);\n            router.send('idleEnded');\n        }\n\n        // If idle period finished and user makes an input -\n        // start session period and close desktop notification\n        // 'idle finished'.\n        if (!idleRunning && !sessionRunning) {\n            notify.closeIdleEnded();\n            startSession();\n            router.send('sessionStarted');\n            console.log('session started since did input');\n        }\n\n        router.send('active');\n    }\n}\n\nfunction addIdleListener() {\n    chrome.idle.onStateChanged.addListener(idleListener);\n    console.log('idle listener added');\n}\n\nfunction rmIdleListener() {\n    chrome.idle.onStateChanged.removeListener(idleListener);\n    console.log('idle listener removed');\n}\n\n\nfunction btnListener(id, buttonIndex) {\n\n    // Chrome notification button's handler\n    // @link https://developer.chrome.com/apps/notifications#event-onButtonClicked\n\n    // Close notification when user clicks any button\n    chrome.notifications.clear(id, function () {\n    });\n\n    if (id === 'sessionEnd') {\n\n        if (buttonIndex === 0) {\n            startSession();\n            console.log('session started by skipping idle , period : ' + utils.ms2min(session.period.load()) + ' min');\n        } else {\n\n            // TODO make this value configurable.\n            // get rid of hardcode\n            startSession(5 * 60000);\n            console.log('session started , reminder, period : ' + utils.ms2min(5 * 60000) + ' min');\n        }\n    }\n\n    if (id === 'idleInterrupted') {\n\n\n        if (buttonIndex === 0) {\n            endIdle();\n            startSession();\n        }\n    }\n\n    router.send('sessionStarted');\n}\n\nfunction addBtnListener() {\n    chrome.notifications.onButtonClicked.addListener(btnListener);\n    console.log('btn listener added');\n}\n\nfunction rmBtnListener() {\n    chrome.notifications.onButtonClicked.removeListener(btnListener);\n    console.log('btn listener removed');\n}\n\n\nfunction startSession(time) {\n    var t = time || +session.period.load();\n\n    session.status.save('running');\n    session.startDate.save(Date.now());\n\n    session.timerId = setTimeout(function () {\n\n        if (!isAfk()) {\n            notify.sessionEnded();\n            audio.play(1);\n        } else {\n            audio.play(1);\n        }\n\n        endSession();\n\n\n        console.log('session ended');\n\n    }, t);\n}\n\nfunction endSession() {\n\n    // For cases when user was idling (was called trackAfk())\n    clearTimeout(session.timerId);\n    session.timerId = null;\n\n    // Sets session status to default ('stopped')\n    session.status.reset();\n\n    // Sets session startDate to default ('0')\n    session.startDate.reset();\n\n    router.send('sessionEnded');\n\n\n    // If session period finished while user is still afk - run idle\n    // manually\n    // @link https://developer.chrome.com/extensions/idle#method-queryState\n    if (isAfk()) {\n        dontTrackAfk();\n        startIdle();\n        router.send('idleStarted');\n        console.log('idle started manually');\n    }\n\n}\n\nfunction restartSession() {\n    audio.stop();\n    notify.closeAll();\n    endSession();\n    startSession();\n}\n\n\n// Starts idle period\nfunction startIdle(time) {\n    var t = time || +idle.period.load();\n\n    idle.status.save('running');\n    idle.startDate.save(Date.now());\n\n    idle.timerId = setTimeout(function () {\n        endIdle();\n        console.log('idle ended');\n\n        notify.idleEnded();\n        audio.play(3);\n        router.send('idleEnded');\n    }, t);\n}\n\nfunction endIdle() {\n\n    clearTimeout(idle.timerId);\n    idle.timerId = null;\n\n    idle.status.reset();\n    idle.startDate.reset();\n\n}\n\nfunction pauseIdle() {\n    endIdle();\n    idle.status.save('paused');\n}\n\nfunction restartIdle() {\n    audio.stop();\n    notify.closeAll();\n    endIdle();\n    startIdle();\n}\n\n\nfunction trackAfk() {\n    var t = idle.period.load();\n    afk.startDate = Date.now();\n\n    router.send('afk', afk.startDate);\n\n    afk.timeoutId = setTimeout(function () {\n        dontTrackAfk();\n        endSession();\n        router.send('sessionEnded');\n\n        console.log('session ended by AFK tracker');\n    }, t);\n}\n\nfunction dontTrackAfk() {\n    router.send('notAfk');\n    clearTimeout(afk.timeoutId);\n    afk.timeoutId = null;\n    afk.startDate = null;\n}\n\nfunction isAfk() {\n    return !!afk.timeoutId;\n}\n\nfunction Engine () {\n\n    // Pressed app switcher button\n    router.on('state', function (message) {\n            if (!message.value) {\n                return state.load();\n            }\n\n            // Set this value to localStorage\n            state.save(message.value);\n\n            // Then execute the main function\n            switcher();\n        }\n    );\n\n    // Pressed the restart sesson button\n    router.on('sessionRestart', function (message) {\n            restartSession();\n            return 1;\n        }\n    );\n\n    // Applying new session period\n    router.on('session.period', function (message) {\n        session.setPeriod(message.value);\n\n        endSession();\n        router.send('sessionEnded');\n        endIdle();\n        router.send('idleInded');\n        startSession();\n        router.send('sessionStarted');\n    });\n\n    // Applying new idle period\n    router.on('idle.period', function (message) {\n        idle.setPeriod(message.value);\n    });\n\n    // Sounds turned off\n    router.on('mute', function () {\n        audio.setVolume(0);\n    });\n\n    // Sounds turned on\n    router.on('unmute', function () {\n        audio.setVolume(1);\n    });\n\n    //Checks 'state' value  when app has been loaded,\n    // and does things depending on received value.\n\n\n    this.switchOn = switchOn;\n    this.switchOff = switchOff;\n\n    switcher();\n}\n\nmodule.exports = Engine;","'use strict';\n\nvar Static = require('./Static.js');\n\nfunction Period (name, time) {\n    this.status = new Static(name + '.status' , 'stopped');\n    this.period = new Static(name + '.period', time);\n    this.startDate = new Static(name + '.startDate', '0');\n    this.status.reset();\n    this.startDate.reset();\n    this.timeoutId = null;\n\n}\n\nPeriod.prototype.isRunning = function () {\n    return this.getStatus() === 'running';\n};\n\nPeriod.prototype.isPaused = function () {\n    return this.getStatus() === 'paused';\n};\n\n\nPeriod.prototype.setStatus = function (status) {\n    return this.status.save(status);\n};\n\nPeriod.prototype.getStatus = function () {\n    return this.status.load();\n};\n\nPeriod.prototype.resetStatus = function () {\n    return this.status.reset();\n};\n\n\n\nPeriod.prototype.setPeriod = function (period) {\n    return this.period.save(period);\n};\n\nPeriod.prototype.getPeriod = function () {\n    return this.period.load();\n};\n\nPeriod.prototype.resetPeriod = function () {\n    return this.period.reset();\n};\n\n\n\nPeriod.prototype.setStartDate = function () {\n    return this.startDate.save(Date.now());\n};\n\nPeriod.prototype.getStartDate = function () {\n    return this.startDate.load();\n};\n\nPeriod.prototype.resetStartDate = function () {\n    return this.startDate.reset();\n};\n\nmodule.exports = Period;\n","'use strict';\n\nconsole.info('Router module');\n\nfunction Router (identifier) {\n\n    // Unique identifier for current script\n    var id = identifier;\n\n    function send (name, value, cb) {\n\n        // @link https://developer.chrome.com/extensions/runtime#method-sendMessage\n        chrome.runtime.sendMessage({\n                id: id,\n                name: name,\n                value: value\n            },\n            cb);\n    }\n\n    function on (name, handler) {\n\n        // Save handler in router object.\n        this[name] = function (message, sender, cb) {\n\n            // If message was send from another Router instance or\n            // message name is not what we expecting then do nothing.\n            if (message.id !== id && message.name === name) {\n\n                // Handle message\n                cb(handler(message));\n            }\n        };\n\n        // @link https://developer.chrome.com/extensions/runtime#event-onMessage\n        chrome.runtime.onMessage.addListener(this[name]);\n    }\n\n    this.send = send;\n    this.on = on;\n}\n\n\nmodule.exports = Router;","'use strict';\n\nconsole.info('Static module');\n\n\nfunction createClass(target, props) {\n    var key,\n        prop;\n\n    for (key in props) {\n        if ( props.hasOwnProperty(key)) {\n            prop = props[key];\n\n            // @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\n            prop.configurable = true;\n            prop.writable = true;\n        }\n\n    }\n    Object.defineProperties(target.prototype, props);\n}\n\nfunction Static (name, defaultValue) {\n\n    // Key for localStorage\n    this.name = name;\n\n    // Default value for cases when there are some problems with\n    // retrieving of value from localStorage\n    // or just for reset purposes.\n    this.defaultValue = defaultValue;\n\n    // Initially load value from localStorage\n    this.load();\n}\n\n\ncreateClass(Static, {\n\n    // Sets value to defaultValue and returns it\n    reset: {\n        value: function reset() {\n            return this.save(this.defaultValue);\n        }\n    },\n\n    // Loads value from localStorage and returns it,\n    // If there are problems - calls reset method.\n    load: {\n        value: function load() {\n            var value = window.localStorage.getItem(this.name);\n\n            // If value successfuly retrieved - return it\n            if (value !== null) {\n                return value;\n            }\n\n            // Otherwise reset it to defaultValue\n            //console.log(\"can't obtain the value \", this.name, 'reset to default value');\n\n            return this.reset();\n        }\n    },\n\n    // Sets value and returns it\n    save: {\n        value: function save(value) {\n            window.localStorage.setItem(this.name, value);\n\n            return this.load();\n        }\n    }\n});\n\n\n\nmodule.exports = Static;\n","'use strict';\n\nvar Engine = require('./Engine.js');\n\nvar engine = new Engine();","'use strict';\n\nconsole.info('audio module');\n\nvar Static = require('./Static.js');\n\n\nvar audio = new Audio(''),\n    volumeStatic = new Static('volume', '1');\n\ndocument.body.appendChild(audio);\n\n\nfunction play (index) {\n    audio.src = 'audio/' + index + '.ogg';\n    audio.volume = volumeStatic.load();\n    audio.play();\n}\n\nfunction stop () {\n    audio.src = '';\n}\n\nfunction setVolume (volume) {\n    volumeStatic.save(volume);\n}\n\n\nexports.play = play;\nexports.stop = stop;\nexports.setVolume = setVolume;\n","'use strict';\n\nconsole.info('badger module');\n\n\n// @link https://developer.chrome.com/extensions/browserAction#method-setIcon\nexports.disableIcon = function () {\n    chrome.browserAction.setIcon({\n        path: '../img/eye-icon-off-19.png' // '../img/popup-icon-off-19.png'\n    }, function () {});\n};\n\nexports.enableIcon = function () {\n    chrome.browserAction.setIcon({\n        path: '../img/eye-icon-on-19.png' // '../img/popup-icon-on-19.png'\n    }, function () {});\n};\n\n","'use strict';\n\nconsole.info('Notify module');\n\n\n\nvar sessionOpts = {\n        type: 'basic',\n        iconUrl: '../img/eye128.jpg', // '../img/eyes_tired2.png'\n        title: 'Take a break!',\n        message: 'Do not touch the computer whole the rest period',\n        contextMessage: 'Sight keeper ',\n        priority: 2,\n        buttons: [{\n            title: 'SKIP',\n            iconUrl: '../img/ignore_ico.jpg'\n        }, {\n            title: 'Remind in 5 minutes',\n            iconUrl: '../img/remind_ico.jpg'\n        }]\n    },\n\n    idleInterruptedOpts = {\n        type: 'basic',\n        iconUrl: '../img/eye128.jpg',\n        title: 'Take a break!',\n        message: 'Do not touch the computer whole the rest period',\n        contextMessage: 'Sight keeper',\n        priority: 2,\n        buttons: [{\n            title: 'SKIP idle',\n            iconUrl: '../img/ignore_ico.jpg'\n        }]\n    },\n\n    idleEndedOpts = {\n        body: 'Now you can proceed',\n        icon: '../img/eye48.png' // '../img/gj.png'\n    },\n\n// Stores Notification instance\n    notifIldeInded;\n\n\nfunction sessionEnded () {\n\n    // @link https://developer.chrome.com/apps/notifications#method-create\n    chrome.notifications.create('sessionEnd', sessionOpts, function (id) {\n\n        setTimeout(function () {\n\n            // @link https://developer.chrome.com/apps/notifications#method-clear\n            chrome.notifications.clear(id, function () {});\n\n        }, 23000);\n    });\n}\n\n// Notifies that idle session is ended,\n// notification showed untill user make any imput.\n// @link https://developer.mozilla.org/en-US/docs/Web/API/notification\nfunction idleEnded () {\n    notifIldeInded = new Notification('Good job!', idleEndedOpts);\n}\n\nfunction closeIdleEnded () {\n    if (notifIldeInded) {\n        notifIldeInded.close();\n        notifIldeInded = null;\n    }\n}\n\n\nfunction idleInterrupted () {\n\n    // @link https://developer.chrome.com/apps/notifications#method-create\n    chrome.notifications.create('idleInterrupted', idleInterruptedOpts, function (id) {\n\n        setTimeout(function () {\n\n            // @link https://developer.chrome.com/apps/notifications#method-clear\n            chrome.notifications.clear(id, function () {});\n        }, 7000);\n    });\n}\n\nfunction closeAll () {\n    chrome.notifications.clear('sessionEnd', function () {});\n    chrome.notifications.clear('idleProgress', function () {});\n    chrome.notifications.clear('idlePaused', function () {});\n    closeIdleEnded();\n}\n\n\n\nexports.sessionEnded = sessionEnded;\nexports.idleEnded = idleEnded;\nexports.closeIdleEnded = closeIdleEnded;\nexports.idleInterrupted = idleInterrupted;\nexports.closeAll = closeAll;\n\n","'use strict';\n\nconsole.info('converter module');\n\n\nexports.ms2min = function (ms) {\n    return +(ms / 60000).toFixed(1);\n};\n\nexports.min2ms = function (mins) {\n    return mins * 60000;\n};\n\nexports.sec2ms = function (sec) {\n    return sec * 1000;\n};\n\nexports.ms2sec = function (ms) {\n    return ms / 1000;\n};\n\n"]}